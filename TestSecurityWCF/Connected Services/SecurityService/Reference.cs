//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestSecurityWCF.SecurityService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CountryBE", Namespace="http://schemas.datacontract.org/2004/07/MyServiceSecurity")]
    [System.SerializableAttribute()]
    public partial class CountryBE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ISOCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdCountryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ISOCode {
            get {
                return this.ISOCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ISOCodeField, value) != true)) {
                    this.ISOCodeField = value;
                    this.RaisePropertyChanged("ISOCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdCountry {
            get {
                return this.IdCountryField;
            }
            set {
                if ((this.IdCountryField.Equals(value) != true)) {
                    this.IdCountryField = value;
                    this.RaisePropertyChanged("IdCountry");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SecurityService.IMyServiceWithCredential")]
    public interface IMyServiceWithCredential {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyServiceWithCredential/GetListCountries", ReplyAction="http://tempuri.org/IMyServiceWithCredential/GetListCountriesResponse")]
        TestSecurityWCF.SecurityService.CountryBE[] GetListCountries(string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyServiceWithCredential/GetListCountries", ReplyAction="http://tempuri.org/IMyServiceWithCredential/GetListCountriesResponse")]
        System.Threading.Tasks.Task<TestSecurityWCF.SecurityService.CountryBE[]> GetListCountriesAsync(string filter);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyServiceWithCredentialChannel : TestSecurityWCF.SecurityService.IMyServiceWithCredential, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyServiceWithCredentialClient : System.ServiceModel.ClientBase<TestSecurityWCF.SecurityService.IMyServiceWithCredential>, TestSecurityWCF.SecurityService.IMyServiceWithCredential {
        
        public MyServiceWithCredentialClient() {
        }
        
        public MyServiceWithCredentialClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyServiceWithCredentialClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceWithCredentialClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceWithCredentialClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestSecurityWCF.SecurityService.CountryBE[] GetListCountries(string filter) {
            return base.Channel.GetListCountries(filter);
        }
        
        public System.Threading.Tasks.Task<TestSecurityWCF.SecurityService.CountryBE[]> GetListCountriesAsync(string filter) {
            return base.Channel.GetListCountriesAsync(filter);
        }
    }
}
